import sqlite3
import os
import telebot
from telebot import types
import settings
import keyboards as kb
import func

bot = telebot.TeleBot(settings.api_tg)

try:
    @bot.message_handler(commands=['stats'])
    def stats_func(message):
        if message.from_user.id == settings.my_id:
            conn = sqlite3.connect('db.db')
            q = conn.cursor()
            q = q.execute('SELECT COUNT(*) FROM adresses').fetchone()
            bot.send_message(settings.my_id,f'–í—Å–µ–≥–æ –≤ –±–æ—Ç–µ {q[0]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            #bot.send_message(settings.my_id,f'–í—Å–µ–≥–æ {users} —é–∑–µ—Ä–æ–≤.')


    @bot.message_handler(commands=['stop'])
    def stats_func(message):
        if message.from_user.id == settings.my_id:
            bot.send_message(settings.my_id, '–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.')
            os._exit(0)
            # bot.send_message(settings.my_id,f'–í—Å–µ–≥–æ {users} —é–∑–µ—Ä–æ–≤.')


    @bot.message_handler(commands=['start'])
    def start_func(message):
        id = message.from_user.id
        if func.get_adr(id) == None:
            print(f'new /start user:{id}')
            bot.send_message(settings.my_id,f'new /start user:{id}')
            bot.send_message(id,'–ü—Ä–∏–≤–µ—Ç! –¢–∞–∫ –∫–∞–∫ —Ç—ã —É –Ω–∞—Å –Ω–æ–≤–µ–Ω—å–∫–∏–π, –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å ‚¨áÔ∏è (–∫–Ω–æ–ø–æ—á–∫–∞ –≤–Ω–∏–∑—É)! –ü–æ—Ç–æ–º –Ω–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–∫—É–ø–∞—Ç—å—Å—è)', reply_markup=kb.input_adress)
        else:
            id = message.from_user.id
            nick = message.from_user.first_name
            bot.send_message(id,f'–ü—Ä–∏–≤–µ—Ç, {nick}!\n–í—Ä–µ–º—è —Ä–∞—Å–∫—É–º–∞—Ä–∏—Ç—å—Å—è, –≤—ã–±–∏—Ä–∞–π –≤–Ω–∏–∑—É –¥–µ–≤–∞–π—Å—ã –ø–æ–¥ –ø—Ä–æ–¥–∞–∂—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏ –∑–∞–∫–∞–∑—ã–≤–∞–π)\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n ‚òëÔ∏è <strong>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥</strong> ‚òëÔ∏è\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nPuff XXL -{settings.puff_xxl_1600_cost}—Ä\nPosh XL -{settings.posh_xl_1500_cost}—Ä\nAlpha Onee Plus -{settings.alpha_onee_plus_2200_cost}—Ä\nBang Switch Duo -{settings.bang_switch_duo_2000_cost}—Ä\nHQD Cuvie Plus -{settings.hqd_cuvie_plus_1200_cost}—Ä\nBANG XXL -{settings.bang_xxl_2000_cost}—Ä\nHQD Maxim -{settings.hqd_maxim_400_cost}—Ä\nMaskking Pro -{settings.maskking_1000_cost}—Ä',reply_markup=kb.main, parse_mode='HTML')
            if func.info_user(id) == 'new':
                func.first_join(id)

    @bot.message_handler(content_types=['text'])
    def start_text(message):
        id = message.from_user.id
        if func.get_adr(id) == None:
            bot.send_message(id, '–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å!', reply_markup=kb.adr)
        else:
            id = message.from_user.id
            if message.text == 'üéã Puff XXL (1600)':
                bot.send_message(id, '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:', reply_markup=kb.puff)
            elif message.text == 'üéã Posh XL (1500)':
                bot.send_message(id, '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:', reply_markup=kb.posh)
            elif message.text == 'üéã Alpha Onee Plus (2200)':
                bot.send_message(id, '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:', reply_markup=kb.alpha)
            elif message.text == 'üéã Maskking PRO (1000)':
                bot.send_message(id, '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:', reply_markup=kb.mask)
            elif message.text == 'üéã HQD Cuvie Plus (1200)':
                bot.send_message(id, '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:', reply_markup=kb.hqd_cuvie_plus)
            elif message.text == 'üéã Bang XXL (2000)':
                bot.send_message(id, '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:', reply_markup=kb.bang_xxl)
            elif message.text == 'üéã Bang Switch DUO (2000)':
                bot.send_message(id, '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:', reply_markup=kb.bang_switch)
            elif message.text == 'üéã HQD Maxim (400)':
                bot.send_message(id, '–í—ã–±–µ—Ä–∏ –≤–∫—É—Å:', reply_markup=kb.hqd_maxim)
            else:
                bot.send_message(id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —é–∑–∞–π –∫–Ω–æ–ø–∫–∏!')

    @bot.callback_query_handler(func=lambda call:True)
    def start_call(call):
        id = call.from_user.id
        data = call.data
        if call.data == 'cheque':
            if func.total_cheque(id)[1] >= 8:
                if int(func.total_cheque(id)[0]) < 5000:
                    bot.send_message(id,f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {func.total_cheque(id)[0]}\n'+func.include(id)+'\n–ü–†–û–í–ï–†–¨ –ê–î–†–ï–° –ò –ö–û–ù–¢–ê–ö–¢:\n'+func.get_adr(id), reply_markup=kb.input_money, parse_mode='HTML')
                else:
                    bot.send_message(id,f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {func.total_cheque(id)[0]}\n'+func.include(id)+'\n–ü–†–û–í–ï–†–¨ –ê–î–†–ï–° –ò –ö–û–ù–¢–ê–ö–¢:\n'+func.get_adr(id), reply_markup=kb.input_money, parse_mode='HTML')
            else:
                bot.send_message(id,f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {func.total_cheque(id)[0]}\n'+func.include(id)+'\n–ü–†–û–í–ï–†–¨ –ê–î–†–ï–° –ò –ö–û–ù–¢–ê–ö–¢:\n'+func.get_adr(id), reply_markup=kb.input_money, parse_mode='HTML')


        elif call.data == 'pay':
            func.create_order(call.from_user.id)
            keyboard = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton('–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É', url=func.return_qiwi_link(call.from_user.id))
            button2 = types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_payment')
            keyboard.add(button,button2)
            bot.send_message(id,'<strong>–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨!!!</strong>\n–í —Ñ–æ—Ä–º–µ –≤—Å–µ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ, –º–æ–∂–µ—Ç–µ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å)',reply_markup=keyboard, parse_mode='HTML')


        elif call.data == 'check_payment':
            id = call.from_user.id
            if func.check_payment(id) != None:
               sum = int(func.total_cheque(id)[1])
               if int(func.total_cheque(id)[1])<5000:
                    bot.send_message(id,'–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ª–æ–≥–∏—Å—Ç–∏–∫–∏: @viphqd')
                   func.pay_seller(sum)
                   bot.send_message(settings.my_id, f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ o—Ç {call.from_user.id}:\n' + func.include(call.from_user.id) + f'/n –ê–¥—Ä–µ—Å: {func.get_adr(call.from_user.id)}')
                   bot.send_message(settings.seller_id, f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ o—Ç {call.from_user.id}:\n' + func.include(call.from_user.id) + f'/n –ê–¥—Ä–µ—Å: {func.get_adr(call.from_user.id)}')
                   func.reset_cart(id)
                   func.delete_code(id)

               else:
                   bot.send_message(id,'–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ª–æ–≥–∏—Å—Ç–∏–∫–∏: @darknethero')
                   func.pay_seller(sum)
                   bot.send_message(settings.my_id, f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ o—Ç {call.from_user.id}:\n' + func.include(call.from_user.id) + f'/n –ê–¥—Ä–µ—Å: {func.get_adr(call.from_user.id)}')
                   bot.send_message(settings.seller_id, f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ o—Ç {call.from_user.id}:\n' + func.include(call.from_user.id) + f'/n –ê–¥—Ä–µ—Å: {func.get_adr(call.from_user.id)}')
                   func.reset_cart(id)
                   func.delete_code(id)
            else:
                bot.send_message(id,'O–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')


        elif call.data == 'adr':
            msg = bot.send_message(id,'–í–≤–µ–¥–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å, –¢–µ–ª–µ—Ñ–æ–Ω –∏ –ò–º—è + –§–∞–º–∏–ª–∏—é (–Ω–µ–æ–±—Ö–æ–∂–∏–º–æ –¥–ª—è –∑–∞–∫–∞–∑–∞)')
            bot.register_next_step_handler(msg, func.insert_adr)

        elif call.data == 'back':
            bot.send_message(call.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é',reply_markup=kb.main)

        elif call.data == 'delete':
            func.reset_cart(id)
            bot.send_message(id,'–ö–æ—Ä–∑–∏–Ω–∞ –æ—Ç—á–∏—â–µ–Ω–∞!')

        else:
            data = call.data
            id = call.from_user.id
            func.separator(data,id)
            bot.answer_callback_query(callback_query_id=call.id,text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!', show_alert=True,)
    bot.polling(none_stop=True)
except Exception as e:
    print(e)
    print('reconnect to Telegram....')
    bot.polling(none_stop=True)